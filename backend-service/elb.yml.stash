---
Resources:
  DnsBackend:
    Type: "AWS::Route53::HostedZone"
    Properties:
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName
        - Key: IAMPolicy
          Value:
            Ref: BackendCustomPolicy
      Name: "internal.service"
      VPCs:
        -
          VPCRegion:
            Fn::Sub: ${AWS::Region}
          VPCId:
            Fn::ImportValue:
              Fn::Sub: ${VpcId}
  BackendLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - Ref: ElbSG
      Subnets:
        Fn::Split:
        - ','
        - Fn::ImportValue:
            Fn::Sub: ${ElbSubnetIds}
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName
  BackendLBHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      -   TargetGroupArn:
            Ref: BackendLBTargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: BackendLB
      Port: "80"
      Protocol: HTTP
  BackendLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: "8080"
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: internal
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VpcId}
  BackendLBDns:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: DNS for Internal ELB in ${AWS::StackName}
      HostedZoneId:
        Ref: DnsBackend
      RecordSets:
      - AliasTarget:
          DNSName:
            Fn::GetAtt: BackendLB.DNSName
          EvaluateTargetHealth: true
          HostedZoneId:
            Fn::GetAtt: BackendLB.CanonicalHostedZoneID
        Name: api.internal.service.
        Type: A
Outputs:
  BackendLBHttpListenerArn:
    Description: Arn of the Backend ELB HTTP Listener.
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-BackendLBHttpListenerArn
    Value:
      Ref: BackendLBHttpListener
